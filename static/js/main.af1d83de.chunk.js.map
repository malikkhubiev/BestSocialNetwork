{"version":3,"sources":["components/NavBar/NavBar.module.css","components/common/Selectors/auth-selectors.ts","serviceWorker.js","DATA/authDATA.ts","api/auth-api.ts","redux/auth-reducer.ts","redux/redux-store.ts","images/logo.png","components/Header/Header.tsx","components/Header/HeaderComponent.tsx","components/Login/Login.tsx","components/common/Selectors/navbar-selectors.ts","components/NavBar/FriendsItem/FriendsItem.tsx","components/NavBar/NavBar.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","images/brain.jpg","components/Profile/Person/PersonStatus.tsx","components/Profile/Person/Person.tsx","components/Profile/Profile.tsx","components/Profile/ProfileComponent.tsx","hoc/withSuspense.tsx","App.tsx","index.js","api/profile-api.ts","redux/profile-reducer.ts","components/common/Selectors/profile-selectors.ts","api/navbar-api.ts","redux/navbar-reducer.ts","api/users-api.ts","components/Profile/MyPosts/MyPosts.module.css","components/Login/Login.module.css","components/Profile/MyPosts/Post/Post.module.css","redux/users-reducer.ts","components/NavBar/FriendsItem/FriendsItem.module.css","DATA/usersDATA.ts","redux/dialogs-reducer.ts","hoc/withAuthRedirect.tsx","components/Profile/Person/Person.module.css","components/Header/Header.module.css","components/Profile/Profile.module.css"],"names":["module","exports","getIsAuth","state","auth","isAuth","getUserName","name","Boolean","window","location","hostname","match","authData","email","password","rememberMe","authAPI","loginData","callBack","counter","map","obj","length","SET_AUTH_USER_DATA","REM_AUTH_USER_DATA","SET_FIVE","initialState","actions","data","type","reducers","combineReducers","profilePage","profileReducer","navbarPage","navbarReducer","dialogsPage","dialogsReducer","usersPage","usersReducer","action","num","form","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","Header","props","dispatch","useDispatch","useSelector","className","h","header","src","logo","alt","onClick","to","HeaderComponent","useEffect","pageNumber","filter","getUsers","LoginForm","style","Login","initialValues","onSubmit","values","setSubmitting","mySubmit","isSubmitting","placeholder","button","disabled","formData","result","prom","userName","credentials","stopSubmit","_error","LoginSanka","getFriends","friends","FriendsItem","f","friendsItem","friendsItemImg","friendsItemName","NavBar","friendsElements","key","id","getFriendsThunk","n","nav","list","activeClassName","newCl","friendsHeader","friendsItems","if","Post","p","postsPost","postsPostImg","postsPostTxt","message","postsPostLike","likes","AddNewPostForm","postText","myAddPost","MyPosts","posts","getPosts","isMainUser","getIsMainUser","postsElements","reverse","postsArea","postsMenu","postsMenuHeader","addPost","postsHeader","PersonStatus","useState","editMode","setEditMode","getStatus","status","setStatus","person","personStatus","onDoubleClick","input","onChange","e","text","target","value","autoFocus","onBlur","changeStatus","Person","profile","getProfile","personTopimg","personData","ava","personDataAva","personDataDesc","personDataDescName","personDataDescDesc","aboutMe","lookingForAJob","Profile","withAuthRedirect","userId","useRouteMatch","params","myGetUser","getUser","undefined","mainContent","withSuspense","WrappedComponent","Suspense","fallback","DialogsContainer","React","lazy","UsersComponent","DialogsContainerComp","UsersComponentComp","App","exact","path","render","rerenderEntireTree","ReactDOM","document","getElementById","subscribe","getState","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","profileAPI","postMessage","mainUser","usersData","user","sendedMessage","searchedUser","messages","push","SET_PROFILE","shouldDialogBoxBeOpened","sendMessage","post","getUserId","getShouldBe","getMessages","navbarAPI","usersDATA","i","followed","SET_FRIENDS","navbarActions","usersAPI","firstResultArray","term","includes","toUpperCase","toLowerCase","follow","followedUserId","unFollow","SET_USERS","SET_TOTAL_USERS_COUNT","SET_CURRENT_PAGE","TOGGLE_IS_FETCHING","SET_FILTER","users","totalUsersCount","pageSize","currentPage","isFetching","totalCount","myProps","asd"],"mappings":"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","file":"static/js/main.af1d83de.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"NavBar_nav__lwz7a\",\"if\":\"NavBar_if__1I2Wm\",\"list\":\"NavBar_list__g3V38\",\"friends\":\"NavBar_friends__3HgJH\",\"friendsHeader\":\"NavBar_friendsHeader__14srN\",\"friendsItems\":\"NavBar_friendsItems__14nHo\"};","import {StateType} from '../../../redux/redux-store';\r\n\r\nexport const getIsAuth = (state:StateType) => {\r\n    return state.auth.isAuth;\r\n}\r\n\r\nexport const getUserName = (state:StateType) => {\r\n    return state.auth.name;\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","let authData = [\r\n    {\r\n        name: \"Malik Khubiev\",\r\n        email: 'malik.hubiev@mail.ru',\r\n        password: 'qwerty',\r\n        rememberMe: false,\r\n    },\r\n];\r\n\r\nexport default authData;","import { FormDataType } from './../types/types';\r\nimport authData from \"../DATA/authDATA\";\r\n\r\nexport const authAPI = {\r\n    logIn(loginData:FormDataType, callBack:Function) {\r\n        let counter = 0;\r\n        authData.map(obj => {\r\n            if (obj.email === loginData.email && obj.password === loginData.password) {\r\n                callBack(true, obj.name);\r\n            } else {\r\n                counter++;\r\n            }\r\n        });\r\n        if (counter === authData.length) {\r\n            callBack('Wrong Email or Password');\r\n        }\r\n    }\r\n}","import { authAPI } from './../api/auth-api';\r\nimport { ThunkType, InferActionsTypes } from './redux-store';\r\nimport { stopSubmit } from 'redux-form';\r\nimport { FormDataType } from '../types/types';\r\n\r\nconst SET_AUTH_USER_DATA:string = 'SET-AUTH-USER-DATA';\r\nconst REM_AUTH_USER_DATA:string = 'REM-AUTH-USER-DATA';\r\nconst SET_FIVE:string = 'SET-FIVE';\r\n\r\nlet initialState = {\r\n    name: null as string | null,\r\n    email: null as string | null,\r\n    password: null as string | null,\r\n    isAuth: false as boolean,\r\n}\r\nexport type InitialStateType = typeof initialState;\r\n\r\nexport const authReducer = (state = initialState, action:ActionsTypes):InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_AUTH_USER_DATA: {\r\n            return {\r\n                ...state,\r\n                // @ts-ignore\r\n                ...action.data,\r\n                isAuth: true,\r\n            }\r\n        };\r\n        case REM_AUTH_USER_DATA: {\r\n            return {\r\n                ...state,\r\n                isAuth: false,\r\n            }\r\n        };\r\n        case SET_FIVE: {\r\n            return {\r\n                ...state,\r\n                // @ts-ignore\r\n                isAuth: action.num,\r\n            }\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\n\r\nexport const actions = {\r\n    setAuthUserData: (data:CredentialsType) => \r\n        ({ type: SET_AUTH_USER_DATA, data } as const),\r\n    remAuthUserData: () => ({ type: REM_AUTH_USER_DATA } as const ),\r\n}\r\n\r\ntype CredentialsType = {\r\n    email: string,\r\n    password: string,\r\n    name: string\r\n}\r\nexport const LoginSanka = (formData:FormDataType):ThunkType<ActionsTypes> => (dispatch) => {\r\n    let result:boolean | undefined;\r\n    let name:string | undefined;\r\n    function callBack(prom:boolean, userName:string) {\r\n        result = prom;\r\n        name = userName;\r\n    }\r\n    authAPI.logIn(formData, callBack);\r\n    if (result === true) {\r\n        if(typeof name === 'string'){\r\n            let credentials:CredentialsType = {\r\n                email: formData.email,\r\n                password: formData.password,\r\n                name: formData.email\r\n            }\r\n            dispatch(actions.setAuthUserData(credentials));\r\n        }\r\n    } else {\r\n        dispatch(stopSubmit('login', { _error: result }));\r\n    }\r\n}\r\n\r\nexport const LogoutSanka = ():ThunkType<ActionsTypes> => (dispatch) => {\r\n    dispatch(actions.remAuthUserData());\r\n}","import { authReducer } from './auth-reducer';\r\nimport { navbarReducer } from './navbar-reducer';\r\nimport { profileReducer } from './profile-reducer';\r\nimport { Action, applyMiddleware, combineReducers, compose, createStore } from 'redux';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport { dialogsReducer } from './dialogs-reducer';\r\nimport { usersReducer } from './users-reducer';\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    navbarPage: navbarReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n});\r\n\r\ntype ReducersType = typeof reducers;\r\nexport type StateType = ReturnType<ReducersType>;\r\n\r\nexport type InferActionsTypes<T> = T extends {[key: string]: (...args:any[]) => infer U}?U:never;\r\n\r\nexport type ThunkType<AT extends Action<any>> = ThunkAction<void, StateType, unknown, AT>;\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\nexport type StoreType = typeof store;\r\n\r\nexport default store;","export default __webpack_public_path__ + \"static/media/logo.3597d19d.png\";","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { LogoutSanka } from '../../redux/auth-reducer'\r\nimport { getIsAuth, getUserName } from '../common/Selectors/auth-selectors'\r\nimport logo from './../../images/logo.png'\r\nimport h from './Header.module.css'\r\n\r\nexport const Header: React.FC<{}> = (props) => {\r\n    \r\n    const dispatch = useDispatch();\r\n\r\n    const myLogout = () => {\r\n        dispatch(LogoutSanka())\r\n    }\r\n\r\n    let isAuth = useSelector(getIsAuth);\r\n    let name = useSelector(getUserName);\r\n\r\n    return (\r\n        <header className={h.header}>\r\n            <img src={logo} alt={'logo'} />\r\n            {isAuth ? <div><p>{name}</p><button onClick={myLogout}>Log out</button></div> : <NavLink to='/login'><p>Log in</p></NavLink>} \r\n        </header>\r\n    )\r\n}","import React, { useEffect } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { FilterType, getUsers } from '../../redux/users-reducer'\r\nimport { Header } from './Header'\r\n\r\nexport const HeaderComponent: React.FC<{}> = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const myGetUsers = (pageNumber: number, filter: FilterType | {}) => {\r\n        dispatch(getUsers(pageNumber, filter))\r\n    }\r\n\r\n    useEffect(() => {\r\n        myGetUsers(1, {});\r\n    }, [])\r\n\r\n    return (\r\n        <Header />\r\n    )\r\n}","import React from 'react'\r\nimport {Formik, Form, Field} from 'formik'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { LoginSanka } from '../../redux/auth-reducer'\r\nimport { FormDataType } from '../../types/types'\r\nimport { getIsAuth } from '../common/Selectors/auth-selectors'\r\nimport style from './Login.module.css'\r\n\r\ntype mySubmit = ({ email, password }: FormDataType) => void\r\n\r\nconst LoginForm: React.FC<{ mySubmit: mySubmit }> = (props) => {\r\n    const submit = (values: FormDataType, { setSubmitting }: { setSubmitting: (isSubmitting: boolean) => void }): void => {\r\n        props.mySubmit({\r\n            email: values.email,\r\n            password: values.password,\r\n        })\r\n        setSubmitting(false)\r\n    }\r\n    return (\r\n        <div className={style.Login}>\r\n                        <p className={style.header}>Login</p>\r\n            <Formik\r\n            initialValues={{ email: \"malik.hubiev@mail.ru\", password: \"qwerty\", rememberMe: false }}\r\n            onSubmit={submit}\r\n        >\r\n            {({ isSubmitting }) => (\r\n                <Form>\r\n                    <Field type=\"text\" name=\"email\" placeholder=\"email\" />\r\n                    <Field type=\"password\" name=\"password\" placeholder=\"password\" />\r\n                    <button className={style.button} type=\"submit\" disabled={isSubmitting}>\r\n                        Log in\r\n                    </button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Login:React.FC<{}> = (props) => {\r\n\r\n    let isAuth = useSelector(getIsAuth)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    let mySubmit = (formData:FormDataType) => {\r\n        dispatch(LoginSanka(formData))\r\n    }\r\n\r\n    if(isAuth){\r\n        return <Redirect to='/profile' />\r\n    }\r\n\r\n    return (\r\n        <div className={style.Login}>\r\n            <LoginForm mySubmit={mySubmit} />\r\n        </div>\r\n    )\r\n}","import { StateType } from \"../../../redux/redux-store\";\r\n\r\nexport const getFriends = (state:StateType) => {\r\n    return state.navbarPage.friends\r\n}","import React from 'react'\r\nimport f from './FriendsItem.module.css'\r\n\r\ntype PropsType = {\r\n    name: string,\r\n}\r\nexport const FriendsItem:React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={f.friendsItem}>\r\n            <div className={f.friendsItemImg}></div>\r\n            <p className={f.friendsItemName}>{props.name}</p>\r\n        </div>\r\n    )\r\n}","import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { getFriendsThunk } from '../../redux/navbar-reducer'\r\nimport { getIsAuth } from '../common/Selectors/auth-selectors'\r\nimport { getFriends } from '../common/Selectors/navbar-selectors'\r\nimport { FriendsItem } from './FriendsItem/FriendsItem'\r\nimport n from './NavBar.module.css'\r\n\r\nexport const NavBar: React.FC<{}> = (props) => {\r\n\r\n    let isAuth = useSelector(getIsAuth)\r\n    let friends = useSelector(getFriends)\r\n    // @ts-ignore\r\n    let friendsElements = friends.map(f => <FriendsItem key={f.id} name={f.name} />)\r\n\r\n    const dispatch = useDispatch()\r\n    const myGetFriends = () => {dispatch(getFriendsThunk())}\r\n\r\n    useEffect(()=>{\r\n        myGetFriends()\r\n    }, [])\r\n    \r\n    return (\r\n        <nav className={n.nav}>\r\n            <ul className={n.list}>\r\n                <NavLink activeClassName={n.newCl} to=\"/profile\"><li>Profile</li></NavLink>\r\n                <NavLink activeClassName={n.newCl} to=\"/dialogs\"><li>Dialogs</li></NavLink>\r\n                <NavLink activeClassName={n.newCl} to=\"/users\"><li>Users</li></NavLink>\r\n            </ul>\r\n            {isAuth?<div className={n.friends}>\r\n                <p className={n.friendsHeader}>Friends</p>\r\n                <div className={n.friendsItems}>\r\n                    {friendsElements}\r\n                </div>\r\n            </div>:<p className={n.if}>If you log in, your friends will be shown here</p>}\r\n        </nav>\r\n    )\r\n}","import React from 'react'\r\nimport p from './Post.module.css'\r\n\r\ntype PropsType = {\r\n    likes: number\r\n    message: string\r\n}\r\nexport const Post:React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={p.postsPost}>\r\n            <div className={p.postsPostImg}></div>\r\n            <p className={p.postsPostTxt}>{props.message}</p>\r\n            <p className={p.postsPostLike}>like: {props.likes}</p>\r\n        </div>\r\n    )\r\n}","import { Field, Form, Formik } from 'formik'\r\nimport React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { addPost } from '../../../redux/profile-reducer'\r\nimport { getIsMainUser, getPosts } from '../../common/Selectors/profile-selectors'\r\nimport p from './MyPosts.module.css'\r\nimport { Post } from './Post/Post'\r\n\r\ntype FormDataType = {\r\n    postText: string\r\n}\r\n\r\ntype myAddPost = ({postText}:{postText:string}) => void\r\n\r\nconst AddNewPostForm: React.FC<{myAddPost: myAddPost}> = (props) => {\r\n    const submit = (values: FormDataType, { setSubmitting }: { setSubmitting: (isSubmitting: boolean) => void }): void => {\r\n        props.myAddPost({postText: values.postText})\r\n        setSubmitting(false)\r\n    }\r\n    return (\r\n        <Formik\r\n            initialValues={{ postText: \"\" }}\r\n            onSubmit={submit}\r\n        >\r\n            {({ isSubmitting }) => (\r\n                <Form>\r\n                    <Field type=\"text\" name=\"postText\" placeholder=\"tell the World about something...\" />\r\n                    <button type=\"submit\" disabled={isSubmitting}>\r\n                        Add post\r\n                    </button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport const MyPosts: React.FC<{}> = (props) => {\r\n    let posts = [...useSelector(getPosts)]\r\n    let isMainUser = useSelector(getIsMainUser)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const myAddPost = ({postText} : {postText: string}) => {\r\n        dispatch(addPost(postText))\r\n    }\r\n\r\n    let postsElements = posts.reverse().map(p => <Post key={p.id} likes={p.likes} message={p.message} />)\r\n\r\n    return (\r\n        <div className={p.postsArea}>\r\n            {isMainUser ? <div className={p.postsMenu}>\r\n                <p className={p.postsMenuHeader}>My posts</p>\r\n                <AddNewPostForm myAddPost={myAddPost} />\r\n            </div> : null}\r\n            <div className={p.posts}>\r\n                {postsElements.length ? postsElements : <p className={p.postsHeader}>This user has not posted anything</p>}\r\n            </div>\r\n        </div>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/brain.87fe3c8f.jpg\";","import React, { ChangeEvent, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { changeStatus } from '../../../redux/profile-reducer'\r\nimport { getStatus } from '../../common/Selectors/profile-selectors'\r\nimport person from './Person.module.css'\r\n\r\nexport const PersonStatus: React.FC<{}> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n    let [status, setStatus] = useState<string>(useSelector(getStatus))\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const changeLocalStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let text: string = e.target.value\r\n        setStatus(text)\r\n    }\r\n\r\n    const activateEditMode = () => { setEditMode(true) }\r\n\r\n    const deActivateEditMode = () => {\r\n        setEditMode(false)\r\n        dispatch(changeStatus(status))\r\n    }\r\n\r\n    return (\r\n        <div className={person.personStatus}>\r\n            {editMode === false ?\r\n                <div>\r\n                    <p onDoubleClick={activateEditMode}>{status}</p>\r\n                </div>\r\n                :\r\n                <div>\r\n                    <input className={person.input} onChange={changeLocalStatus} autoFocus={true} onBlur={deActivateEditMode} value={status} />\r\n                </div>}\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { getProfile } from '../../common/Selectors/profile-selectors'\r\nimport ava from './../../../images/brain.jpg'\r\nimport person from './Person.module.css'\r\nimport { PersonStatus } from './PersonStatus'\r\n\r\nexport const Person:React.FC<{}> = (props) => {\r\n\r\n    let profile = useSelector(getProfile)\r\n\r\n    return (\r\n        <div className={person.person}>\r\n            <div className={person.personTopimg}></div>\r\n            <div className={person.personData}>\r\n                <img src={ava} alt={'avatar'} className={person.personDataAva}/>\r\n                <div className={person.personDataDesc}>\r\n                    <p className={person.personDataDescName}>{profile.name}</p>\r\n                    <div className={person.personDataDescDesc}><b>Статус:</b> {profile.isMainUser?<PersonStatus />:<p className={person.personDataDescDesc}>{profile.status}</p>}</div>\r\n                    <div className={person.personDataDescDesc}><b>Обо мне:</b> {profile.aboutMe}</div>\r\n                    <div className={person.personDataDescDesc}><b>Сведения о работе:</b> {profile.lookingForAJob ? <p className={person.personDataDescDesc}>В поиске работы</p> : <p className={person.personDataDescDesc}>У меня отличная работа</p>}</div>\r\n                    <div className={person.personDataDescDesc}><b>Образование:</b> RSEU Rinh</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { MyPosts } from './MyPosts/MyPosts'\r\nimport { Person } from './Person/Person'\r\n\r\nexport const Profile: React.FC<{}> = (props) => {\r\n    return (\r\n        <>\r\n            <Person />\r\n            <MyPosts />\r\n        </>\r\n    )\r\n}","import React, { useEffect } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useRouteMatch } from 'react-router-dom'\r\nimport { compose } from 'redux'\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect'\r\nimport { getUser } from '../../redux/profile-reducer'\r\nimport { Profile } from './Profile'\r\nimport p from './Profile.module.css'\r\n\r\nconst ProfileComponent: React.FC<{}> = (props) => {\r\n    \r\n    // @ts-ignore\r\n    let userId: string | undefined = useRouteMatch().params.userId\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const myGetUser = (userId: number | string) => { dispatch(getUser(userId)) }\r\n\r\n    useEffect(() => {\r\n        if (userId !== undefined) {\r\n            myGetUser(userId)\r\n        } else {\r\n            myGetUser('-1')\r\n        }\r\n    }, [userId])\r\n\r\n    return (\r\n        <div className={p.mainContent}>\r\n            <Profile />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect(ProfileComponent)\r\n)","import React from 'react';\r\n\r\nexport function withSuspense <WCP>(WrappedComponent:React.ComponentType<WCP>) {\r\n    return (props:WCP) => (\r\n        <React.Suspense fallback={<div>...Loading</div>}>\r\n            <WrappedComponent {...props} />\r\n        </React.Suspense>\r\n    )\r\n}","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { HashRouter, Redirect, Route, Switch } from 'react-router-dom';\r\nimport './App.css';\r\nimport { HeaderComponent } from './components/Header/HeaderComponent';\r\nimport { Login } from './components/Login/Login';\r\nimport { NavBar } from './components/NavBar/NavBar';\r\nimport ProfileComponent from './components/Profile/ProfileComponent';\r\nimport { withSuspense } from './hoc/withSuspense';\r\nimport store from './redux/redux-store';\r\n\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\r\nconst UsersComponent = React.lazy(() => import('./components/Users/UsersComponent'));\r\n\r\nlet DialogsContainerComp = withSuspense(DialogsContainer);\r\nlet UsersComponentComp = withSuspense(UsersComponent);\r\n\r\nconst App: React.FC<{}> = () => {\r\n  return (\r\n    <HashRouter>\r\n      <Provider store={store}>\r\n        <div className=\"appContainer\">\r\n          <HeaderComponent />\r\n          <div className=\"doublePart\">\r\n            <div className=\"leftSide\">\r\n              <NavBar />\r\n            </div>\r\n            <div className=\"rightSide\">\r\n              <Switch>\r\n                <Route exact path='/' render={() => <Redirect to='/profile' />} />\r\n                <Route path='/login' render={() => <Login />} />\r\n                <Route path='/profile/:userId?' render={() => <ProfileComponent />} />\r\n                <Route path='/dialogs/:userId?' render={() => <DialogsContainerComp />} />\r\n                <Route path='/users' render={() => <UsersComponentComp />} />\r\n                <Route path='*' render={() => <p>404 Not found</p>} />\r\n              </Switch>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Provider>\r\n    </HashRouter>\r\n  );\r\n}\r\nexport default App;","import * as serviceWorker from './serviceWorker';\r\nimport store from './redux/redux-store';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nlet rerenderEntireTree = (state) => {\r\n  ReactDOM.render(<App />, document.getElementById('root'));\r\n}\r\n\r\nstore.subscribe(() => {\r\n  let state = store.getState();\r\n  rerenderEntireTree(state);\r\n});\r\n\r\nrerenderEntireTree(store.state);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import { users as usersData } from './../DATA/usersDATA';\r\nimport { mainUser } from './../DATA/usersDATA';\r\n\r\nexport const profileAPI = {\r\n    addPost(postMessage: string) {\r\n        let message = postMessage;\r\n        let id = mainUser.posts.length;\r\n        mainUser.posts = [...mainUser.posts, { id, message, likes: 100 }];\r\n        return mainUser;\r\n    },\r\n    changeStatus(status: string) {\r\n        mainUser.status = status;\r\n        return mainUser;\r\n    },\r\n    getUser(userId: number | string) {\r\n        let profile;\r\n        usersData.map(user => {\r\n            if (user.id === +userId) profile = user;\r\n        });\r\n        return profile;\r\n    },\r\n    getMainUser() {\r\n        return mainUser;\r\n    },\r\n    sendMessage(id: number, sendedMessage: string) {\r\n        let searchedUser;\r\n        usersData.map(user => {\r\n            if (user.id === id) {\r\n                user.messages.push({ id: user.messages.length, message: sendedMessage });\r\n                searchedUser = user;\r\n            }\r\n        });\r\n        return searchedUser;\r\n    }\r\n}","import { profileAPI } from './../api/profile-api';\r\nimport { ThunkType, InferActionsTypes } from './redux-store';\r\nimport { ProfileType } from './../types/types';\r\n\r\nconst SET_PROFILE: string = 'SET_PROFILE';\r\n\r\ntype InitialStateType = {\r\n    profile: ProfileType\r\n}\r\nlet initialState: InitialStateType = {\r\n    profile: {\r\n        id: -1,\r\n        name: \"Malik\",\r\n        aboutMe: 'Я Front-end разработчик',\r\n        status: \"Double click me!\",\r\n        lookingForAJob: true,\r\n        isMainUser: true,\r\n        posts: [],\r\n        shouldDialogBoxBeOpened: false\r\n    }\r\n}\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_PROFILE: {\r\n            return {\r\n                ...state,\r\n                profile: {\r\n                    ...action.profile,\r\n                    posts: action.profile.posts,\r\n                },\r\n            }\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setProfile: (profile: ProfileType) => { return {type: SET_PROFILE, profile} as const},\r\n}\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\n\r\nexport const sendMessage = (id: number, message: string): ThunkType<ActionsTypes> => (dispatch) => {\r\n    let profile: ProfileType | undefined = profileAPI.sendMessage(id, message);\r\n    if (profile !== undefined) dispatch(actions.setProfile(profile));\r\n}\r\n\r\nexport const changeStatus = (status: string): ThunkType<ActionsTypes> => (dispatch) => {\r\n    let profile: ProfileType | undefined = profileAPI.changeStatus(status);\r\n    dispatch(actions.setProfile(profile));\r\n}\r\n\r\nexport const addPost = (post: string): ThunkType<ActionsTypes> => (dispatch) => {\r\n    let profile: ProfileType | undefined = profileAPI.addPost(post);\r\n    dispatch(actions.setProfile(profile));\r\n}\r\n\r\nexport const getUser = (userId: number | string): ThunkType<ActionsTypes> => (dispatch) => {\r\n    if (userId === '-1') {\r\n        let profile: ProfileType | undefined = profileAPI.getMainUser();\r\n        dispatch(actions.setProfile(profile));\r\n    } else {\r\n        let profile: ProfileType | undefined = profileAPI.getUser(userId);\r\n        if (profile !== undefined) dispatch(actions.setProfile(profile));\r\n    }\r\n}","import { StateType } from './../../../redux/redux-store';\r\n\r\nexport const getProfile = (state:StateType) => {\r\n    return state.profilePage.profile\r\n}\r\n\r\nexport const getStatus = (state:StateType) => {\r\n    return state.profilePage.profile.status\r\n}\r\n\r\nexport const getUserId = (state:StateType) => {\r\n    return state.profilePage.profile.id\r\n}\r\n\r\nexport const getShouldBe = (state:StateType) => {\r\n    return state.profilePage.profile.shouldDialogBoxBeOpened\r\n}\r\n\r\nexport const getMessages = (state:StateType) => {\r\n    return state.profilePage.profile.messages\r\n}\r\n\r\nexport const getPosts = (state: StateType) => {\r\n    return state.profilePage.profile.posts\r\n}\r\n\r\nexport const getIsMainUser = (state: StateType) => {\r\n    return state.profilePage.profile.isMainUser\r\n}\r\n","import { users as usersDATA } from './../DATA/usersDATA';\r\nimport { UserType } from '../types/types'\r\n\r\nexport const navbarAPI = {\r\n    getFriends: () => {\r\n        const result:Array<UserType> = []\r\n        usersDATA.map(i=>i.followed?result.push(i):0)\r\n        return result\r\n    }\r\n}","import { InferActionsTypes, ThunkType } from './redux-store';\r\nimport { UserType } from './../types/types'\r\nimport { navbarAPI } from '../api/navbar-api';\r\n\r\nconst SET_FRIENDS = \"SET-FRIENDS\"\r\n\r\nlet initialState = {\r\n    friends: [] as Array<UserType> | []\r\n}\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\nexport const navbarReducer = (state:InitialStateType = initialState, action:ActionsTypes):InitialStateType => {\r\n    switch(action.type){\r\n        case SET_FRIENDS: {\r\n            return{\r\n                friends: action.friends\r\n            }\r\n        }\r\n        default: return state \r\n    }\r\n}\r\n\r\nexport const navbarActions = {\r\n    setFriends: (friends: Array<UserType>) => ({type: SET_FRIENDS, friends} as const)\r\n}\r\n\r\nexport type ActionsTypes = InferActionsTypes<typeof navbarActions>\r\n\r\nexport const getFriendsThunk = ():ThunkType<ActionsTypes> => (dispatch) => {\r\n    let friends = navbarAPI.getFriends()\r\n    dispatch(navbarActions.setFriends(friends))\r\n}","import { FilterType } from './../redux/users-reducer';\r\nimport { users as usersData } from './../DATA/usersDATA';\r\nimport { UserType } from '../types/types';\r\n\r\nexport const usersAPI = {\r\n    getUsers(filter: FilterType) {\r\n        let firstResultArray: Array<UserType> = [];\r\n        let result: Array<UserType> = [];\r\n        if(filter.friends !== null && filter.friends !== undefined || filter.term !== \"\" && filter.term !== undefined){\r\n            if(filter.friends !== null && filter.friends !== undefined && filter.term !== undefined && filter.term !== \"\"){\r\n                usersData.map(user => user.followed === filter.friends ? firstResultArray.push(user) : 0)\r\n                firstResultArray.map(user => {\r\n                    if (user.name.includes(filter.term.toUpperCase()) || user.name.includes(filter.term.toLowerCase())) result.push(user)\r\n                })\r\n                return result\r\n            }else if(filter.friends !== null && filter.friends !== undefined){\r\n                usersData.map(user => user.followed === filter.friends ? result.push(user) : 0)\r\n                return result\r\n            }else{\r\n                usersData.map(user => {\r\n                    if (user.name.includes(filter.term.toUpperCase()) || user.name.includes(filter.term.toLowerCase())) result.push(user)\r\n                })\r\n                return result\r\n            }\r\n        } else {\r\n            return usersData\r\n        }\r\n    },\r\n    follow(followedUserId: number) {\r\n        usersData.map(user => user.id === followedUserId ? user.followed = true : 0);\r\n        return usersData;\r\n    },\r\n    unFollow(followedUserId: number) {\r\n        usersData.map(user => user.id === followedUserId ? user.followed = false : 0);\r\n        return usersData;\r\n    }\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsArea\":\"MyPosts_postsArea__2kbRk\",\"postsMenu\":\"MyPosts_postsMenu__26eO-\",\"postsMenuHeader\":\"MyPosts_postsMenuHeader__ZYcGr\",\"postsMenuSend\":\"MyPosts_postsMenuSend__TYUa8\",\"posts\":\"MyPosts_posts__2cD72\",\"postsHeader\":\"MyPosts_postsHeader__2pAf-\",\"postsPost\":\"MyPosts_postsPost__3hMSh\",\"postsPostImg\":\"MyPosts_postsPostImg__seUFn\",\"postsPostTxt\":\"MyPosts_postsPostTxt__2JDn7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Login\":\"Login_Login__3k6oi\",\"header\":\"Login_header__4c5FN\",\"button\":\"Login_button__CkPqY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsPost\":\"Post_postsPost__2Mha6\",\"postsPostImg\":\"Post_postsPostImg__16oIC\",\"postsPostTxt\":\"Post_postsPostTxt__xpfb-\",\"postsPostLike\":\"Post_postsPostLike__5g5zs\"};","import { usersAPI } from '../api/users-api';\r\nimport { UserType } from './../types/types';\r\nimport { getFriendsThunk } from './navbar-reducer';\r\nimport { InferActionsTypes, ThunkType } from './redux-store';\r\n\r\nconst SET_USERS: string = 'SET-USERS';\r\nconst SET_TOTAL_USERS_COUNT: string = 'SET-TOTAL-USERS-COUNT';\r\nconst SET_CURRENT_PAGE: string = 'SET-CURRENT-PAGE';\r\nconst TOGGLE_IS_FETCHING: string = 'TOGGLE-IS-FETCHING';\r\nconst SET_FILTER: string = \"SET-FILTER\";\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType> | [],\r\n    totalUsersCount: 0 as number,\r\n    pageSize: 10 as number,\r\n    currentPage: 1 as number,\r\n    isFetching: true,\r\n    filter: {\r\n        term: \"\",\r\n        friends: null\r\n    } as {\r\n        term: string\r\n        friends: boolean | null\r\n    }\r\n}\r\n\r\nexport type InitialStateType = typeof initialState;\r\nexport type FilterType = InitialStateType[\"filter\"];\r\n\r\nexport const usersReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_USERS: {\r\n            return {\r\n                ...state,\r\n                // @ts-ignore\r\n                users: action.users\r\n            };\r\n        };\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {\r\n                ...state,\r\n                // @ts-ignore\r\n                totalUsersCount: action.totalCount,\r\n            }\r\n        };\r\n        case SET_CURRENT_PAGE: {\r\n            return {\r\n                ...state,\r\n                // @ts-ignore\r\n                currentPage: action.pageNumber,\r\n            }\r\n        };\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {\r\n                ...state,\r\n                // @ts-ignore\r\n                isFetching: action.isFetching,\r\n            }\r\n        };\r\n        case SET_FILTER: {\r\n            return {\r\n                ...state,\r\n                // @ts-ignore\r\n                filter: action.filter\r\n            }\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setUsers: (users: Array<UserType>) => ({ type: SET_USERS, users }as const),\r\n    setCurrentPage: (pageNumber: number) => ({ type: SET_CURRENT_PAGE, pageNumber }as const),\r\n    setTotalUsersCount: (totalCount: number) => ({ type: SET_TOTAL_USERS_COUNT, totalCount }as const),\r\n    setFilter: (filter: FilterType) => ({type: SET_FILTER, filter} as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({ type: TOGGLE_IS_FETCHING, isFetching }as const),\r\n}\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\n\r\nexport const getUsers = (pageNumber: number, filter: FilterType | {}):ThunkType<ActionsTypes> => (dispatch) => {\r\n    dispatch(actions.toggleIsFetching(true));\r\n    let users = usersAPI.getUsers(filter as FilterType);\r\n    dispatch(actions.setUsers(users as Array<UserType>));\r\n    dispatch(actions.setFilter(filter as FilterType));\r\n    if (users) dispatch(actions.setTotalUsersCount(users.length));\r\n    dispatch(actions.setCurrentPage(pageNumber));\r\n    dispatch(actions.toggleIsFetching(false));\r\n}\r\n\r\nexport const follow = (id: number):ThunkType<ActionsTypes> => (dispatch) => {\r\n    let users = usersAPI.follow(id)\r\n    // navbar\r\n    dispatch(getFriendsThunk())\r\n    // navbar\r\n    dispatch(actions.setUsers(users))\r\n}\r\n\r\nexport const unFollow = (id: number):ThunkType<ActionsTypes> => (dispatch) => {\r\n    let users = usersAPI.unFollow(id)\r\n    // navbar\r\n    dispatch(getFriendsThunk())\r\n    // navbar\r\n    dispatch(actions.setUsers(users))\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friendsItem\":\"FriendsItem_friendsItem__2vJ3I\",\"friendsItemImg\":\"FriendsItem_friendsItemImg__22Xmv\",\"friendsItemName\":\"FriendsItem_friendsItemName__2gYOI\"};","import { mainUserType } from './../types/types';\r\nimport { UserType } from \"../types/types\";\r\n\r\nexport const mainUser:mainUserType = {\r\n    id: -1,\r\n    name: \"Malik\",\r\n    aboutMe: \"Я Front-end разработчик\",\r\n    status: \"Double click me!\",\r\n    lookingForAJob: true,\r\n    isMainUser: true,\r\n    posts: [],\r\n    shouldDialogBoxBeOpened: false,\r\n}\r\n\r\ntype UsersType = Array<UserType>;\r\nexport const users:UsersType = [\r\n    {\r\n        id: 0,\r\n        name: \"Alex\",\r\n        aboutMe: 'Давайте жить дружно',\r\n        status: \"Double click me!\",\r\n        lookingForAJob: true,\r\n        followed: false,\r\n        posts: [\r\n            { id: 0, message: \"Hi!\", likes: 5 },\r\n            { id: 1, message: \"Life is so beautiful\", likes: 12 },\r\n        ],\r\n        messages: [\r\n            { id: 0, message: \"Hi!\"},\r\n            { id: 1, message: \"How are you?\"},\r\n        ],\r\n        isMainUser: false,\r\n    },\r\n    {\r\n        id: 1,\r\n        name: 'Billy',\r\n        aboutMe: 'Доброта спасёт мир!!!',\r\n        status: \"Double click me!\",\r\n        lookingForAJob: true,\r\n        followed: false,\r\n        posts: [\r\n            { id: 0, message: \"DH is one of the best serials\", likes: 25 },\r\n            { id: 1, message: \"New song...That's good!\", likes: 122 },\r\n        ],\r\n        messages: [\r\n            { id: 0, message: \"Have a great day!\"},\r\n        ],\r\n        isMainUser: false,\r\n    },\r\n    {\r\n        id: 2,\r\n        name: 'Cameron',\r\n        aboutMe: 'У меня вышел новый альбом!!!',\r\n        status: \"Double click me!\",\r\n        lookingForAJob: true,\r\n        followed: false,\r\n        posts: [\r\n            { id: 0, message: \"Have a great day!!!\", likes: 15 },\r\n        ],\r\n        messages:[],\r\n        isMainUser: false,\r\n    },\r\n    {\r\n        id: 3,\r\n        name: 'Adrianne',\r\n        aboutMe: 'Каждый день прыгю с парашютом, присоединяйтесь',\r\n        status: \"Double click me!\",\r\n        lookingForAJob: true,\r\n        followed: false,\r\n        posts: [\r\n            { id: 0, message: \"American atmosphere\", likes: 213 },\r\n            { id: 1, message: \"Don't drink coffee\", likes: -5 },\r\n            { id: 2, message: \"Last post wasn't mine\", likes: 5 },\r\n        ],\r\n        messages:[],\r\n        isMainUser: false,\r\n    },\r\n    {\r\n        id: 4,\r\n        name: 'Robert',\r\n        aboutMe: 'Снял 3 фильма, из них 4 получили оскара :)',\r\n        status: \"Double click me!\",\r\n        lookingForAJob: false,\r\n        followed: true,\r\n        posts: [],\r\n        messages:[],\r\n        isMainUser: false,\r\n    },\r\n    {\r\n        id: 5,\r\n        name: 'Alan',\r\n        aboutMe: 'Физкульт привет, кому составить план тренировок - пишите в личку',\r\n        status: \"Double click me!\",\r\n        lookingForAJob: true,\r\n        followed: false,\r\n        posts: [],\r\n        messages:[],\r\n        isMainUser: false,\r\n    },\r\n    {\r\n        id: 6,\r\n        name: 'Hugh',\r\n        aboutMe: 'Бесконечность не предел !!!',\r\n        status: \"Double click me!\",\r\n        lookingForAJob: false,\r\n        followed: true,\r\n        posts: [],\r\n        messages:[],\r\n        isMainUser: false,\r\n    },\r\n    {\r\n        id: 7,\r\n        name: 'Amanda',\r\n        aboutMe: 'Люблю рисовать, сегодня отличная погода для пейзажа',\r\n        status: \"Double click me!\",\r\n        lookingForAJob: false,\r\n        followed: false,\r\n        posts: [],\r\n        messages:[],\r\n        isMainUser: false,\r\n    },\r\n    {\r\n        id: 8,\r\n        name: 'Justin',\r\n        aboutMe: 'Умение перелезать через заборы - показатель интеллекта',\r\n        status: \"Double click me!\",\r\n        lookingForAJob: false,\r\n        followed: true,\r\n        posts: [],\r\n        messages:[],\r\n        isMainUser: false,\r\n    },\r\n    {\r\n        id: 9,\r\n        name: 'Peter',\r\n        aboutMe: 'С наступающим моим днём рождения ;)',\r\n        status: \"Double click me!\",\r\n        lookingForAJob: true,\r\n        followed: true,\r\n        posts: [],\r\n        messages:[],\r\n        isMainUser: false,\r\n    },\r\n    {\r\n        id: 10,\r\n        name: 'Max',\r\n        aboutMe: 'Области тьмы один из лучших сериалов, всем советую!!!',\r\n        status: \"Double click me!\",\r\n        lookingForAJob: true,\r\n        followed: true,\r\n        posts: [],\r\n        messages:[],\r\n        isMainUser: false,\r\n    },\r\n    {\r\n        id: 11,\r\n        name: 'John',\r\n        aboutMe: 'Так сладок мед, что, наконец, он горек. Избыток вкуса убивает вкус.',\r\n        status: \"Double click me!\",\r\n        lookingForAJob: true,\r\n        followed: true,\r\n        posts: [],\r\n        messages:[],\r\n        isMainUser: false,\r\n    },\r\n];","import { usersAPI } from \"../api/users-api\";\r\nimport { UserType } from \"../types/types\";\r\nimport { InferActionsTypes, ThunkType } from \"./redux-store\";\r\nimport { FilterType } from './users-reducer';\r\n\r\nconst SET_USERS:string = \"SET-USERS\";\r\n\r\nconst initialState = {\r\n    users: [] as Array<UserType> | [],\r\n}\r\n\r\ntype InitialStateType = typeof initialState;\r\n\r\nexport const dialogsReducer = (state = initialState, action:ActionsTypes): InitialStateType => {\r\n    switch(action.type){\r\n        case SET_USERS: {\r\n            return {\r\n                ...state, \r\n                users: action.users\r\n            };\r\n        };\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setUsers: (users: Array<UserType>) => ({type: SET_USERS, users} as const)\r\n}\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>; \r\n\r\nexport const getUsers = ():ThunkType<ActionsTypes> => (dispatch) => {\r\n    let users = usersAPI.getUsers({} as FilterType);\r\n    dispatch(actions.setUsers(users as UserType[]));\r\n} ","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { getIsAuth } from '../components/common/Selectors/auth-selectors';\r\n\r\nexport function withAuthRedirect<WCP> (WrappedComponent: React.ComponentType<WCP>) {\r\n\r\n    const RedirectComponent:React.FC<{}> = (props) => {\r\n\r\n        let myProps = {...props, asd: 5}\r\n\r\n        let isAuth = useSelector(getIsAuth)\r\n        \r\n        if (!isAuth) return <Redirect to='/login' />\r\n        \r\n        return <WrappedComponent {...myProps as unknown as WCP} />\r\n        \r\n    }\r\n    \r\n    return RedirectComponent\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"person\":\"Person_person__24vZz\",\"personTopimg\":\"Person_personTopimg__3zpo1\",\"personData\":\"Person_personData__3TPmN\",\"personDataAva\":\"Person_personDataAva__2h547\",\"personDataDesc\":\"Person_personDataDesc__32VL8\",\"personDataDescName\":\"Person_personDataDescName__3O5Tc\",\"personStatus\":\"Person_personStatus__TzxDq\",\"personDataDescDesc\":\"Person_personDataDescDesc__3tEO6\",\"input\":\"Person_input__3BOns\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__bzq2P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContent\":\"Profile_mainContent__1MJKN\"};"],"sourceRoot":""}